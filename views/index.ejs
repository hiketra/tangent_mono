<!doctype html>
<html>

<head>
	<title>Socket.IO chat</title>
	<style>
		* {
			margin: 0;
			padding: 0;
		}

		.tree ul {
			padding-top: 20px;
			position: relative;

			transition: all 0.5s;
			-webkit-transition: all 0.5s;
			-moz-transition: all 0.5s;
		}

		.tree li {
			float: left;
			text-align: center;
			list-style-type: none;
			position: relative;
			padding: 20px 5px 0 5px;

			transition: all 0.5s;
			-webkit-transition: all 0.5s;
			-moz-transition: all 0.5s;
		}
		/*We will use ::before and ::after to draw the connectors*/

		.tree li::before,
		.tree li::after {
			content: '';
			position: absolute;
			top: 0;
			right: 50%;
			border-top: 1px solid #ccc;
			width: 50%;
			height: 20px;
		}

		.tree li::after {
			right: auto;
			left: 50%;
			border-left: 1px solid #ccc;
		}
		/*We need to remove left-right connectors from elements without
any siblings*/

		.tree li:only-child::after,
		.tree li:only-child::before {
			display: none;
		}
		/*Remove space from the top of single children*/

		.tree li:only-child {
			padding-top: 0;
		}
		/*Remove left connector from first child and
right connector from last child*/

		.tree li:first-child::before,
		.tree li:last-child::after {
			border: 0 none;
		}
		/*Adding back the vertical connector to the last nodes*/

		.tree li:last-child::before {
			border-right: 1px solid #ccc;
			border-radius: 0 5px 0 0;
			-webkit-border-radius: 0 5px 0 0;
			-moz-border-radius: 0 5px 0 0;
		}

		.tree li:first-child::after {
			border-radius: 5px 0 0 0;
			-webkit-border-radius: 5px 0 0 0;
			-moz-border-radius: 5px 0 0 0;
		}
		/*Time to add downward connectors from parents*/

		.tree ul ul::before {
			content: '';
			position: absolute;
			top: 0;
			left: 50%;
			border-left: 1px solid #ccc;
			width: 0;
			height: 20px;
		}

		.tree li a {
			border: 1px solid #ccc;
			padding: 5px 10px;
			text-decoration: none;
			color: #666;
			font-family: arial, verdana, tahoma;
			font-size: 11px;
			display: inline-block;

			border-radius: 5px;
			-webkit-border-radius: 5px;
			-moz-border-radius: 5px;

			transition: all 0.5s;
			-webkit-transition: all 0.5s;
			-moz-transition: all 0.5s;
		}
		/*Time for some hover effects*/
		/*We will apply the hover effect the the lineage of the element also*/

		.tree li a:hover,
		.tree li a:hover+ul li a {
			background: #c8e4f8;
			color: #000;
			border: 1px solid #94a0b4;
		}
		/*Connector styles on hover*/

		.tree li a:hover+ul li::after,
		.tree li a:hover+ul li::before,
		.tree li a:hover+ul::before,
		.tree li a:hover+ul ul::before {
			border-color: #94a0b4;
		}
		/*Thats all. I hope you enjoyed it.
Thanks :)*/

		* {
			margin: 0;
			padding: 0;
			box-sizing: border-box;
		}

    .tree-position {
      width: 25%;
      text-align: right;
      color: blue;
      display: inline-block;
      position: fixed;
      top: 10px;
      right: 10px;
    }

		body {
			font: 13px Helvetica, Arial;
		}

		#current-chat {
			width: 50%;
      display: inline-block;
		}

		form {
			background: #000;
			padding: 3px;
			position: fixed;
			bottom: 0;
			width: 100%;
		}

		form input {
			border: 0;
			padding: 10px;
			width: 90%;
			margin-right: .5%;
		}

		form button {
			width: 9%;
			background: rgb(130, 224, 255);
			border: none;
			padding: 10px;
		}

		#messages {
			list-style-type: none;
			margin: 0;
			padding: 0;
		}

		#messages li {
			padding: 5px 10px;
		}

		#messages li:nth-child(odd) {
			background: #eee;
		}

		#messages {
			margin-bottom: 40px
		}
	</style>
	<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
</head>

<body>
	<div id="current-chat">
		<ul id="messages">
			<% messages.forEach(function(message){%>
				<li id="<%= message.identity %>">
					<%= message.message %>
						<div align="right">
							<%= message.timeHours %>:
								<%= message.timeMinutes %>
									<button type="button" class="btn btn-default" aria-label="Right Align" onclick="createSubthread(<%=message.identity%>)">
                  <span class="glyphicon glyphicon-leaf" aria-hidden="true"></span>
              </button>
						</div>
				</li>
				<% }) %>
		</ul>
		<form action="">
			<input id="m" autocomplete="off" /><button>Send</button>
		</form>
		<script src="https://cdn.socket.io/socket.io-1.2.0.js"></script>
		<script src="https://code.jquery.com/jquery-1.11.1.js"></script>
		<script>
			var subthreadCreation = false;
			var newParent = null;

			function createSubthread(node) {
				console.log("in the subthread, setting node to: " + node)
				subthreadCreation = true;
				newParent = node;
			}

			function addNewMessage(msg) {
				var liElement = document.createElement("li");
				liElement.setAttribute("id", msg.identity);
				liElement.appendChild(document.createTextNode(msg.message));
				var timeStamp = document.createElement("div");
				timeStamp.setAttribute("align", "right");
				timeStamp.innerHTML =
					`${msg.timeHours}:${msg.timeMinutes} <button type='button' class='btn btn-default' aria-label='Right Align' onclick='createSubthread(${msg.identity})'>
              <span class='glyphicon glyphicon-leaf' aria-hidden='true'></span>
              </button>`
				liElement.appendChild(timeStamp);
				$('#messages').append(liElement);
			}

			$(function() {

				var socket = io.connect();
				socket.on('connect', function() {
					socket.emit('room', <%=channelId%>)
				})
				$('form').submit(function() {
          debugger;
					if (subthreadCreation) {
						var channel = newParent;
					} else {
						var channel = <%=channelId%>;
					}
					console.log(subthreadCreation)
					var msg = $('#m').val()
					console.log(channel)
					console.log(msg)
					var messageBundle = {
						currentRoom: <%=channelId%>,
						parentNode: channel,
						message: msg.toString()
					}
					console.log(`bundle node ${messageBundle.parentNode} message ${messageBundle.message}`)
					console.log("Inside the page" + messageBundle)
					socket.emit('chat message', messageBundle);
					$('#m').val('');
					subthreadCreation = false;
					return false;
          debugger;
				});
				socket.on('chat message', function(msg) {
					addNewMessage(msg);
          debugger;
					window.scrollTo(0, document.body.scrollHeight);
				});
				socket.on('retrieved_messages', function(messages) {
					$('#messages').append($('<li>').text(messages));
					window.scrollTo(0, document.body.scrollHeight);
				});
				socket.on('tree update', function(tree) {
					debugger;
					console.log(tree);
					var listTree = ``;
					if('children' in tree){
					console.log(`obtained nodes ${JSON.stringify(tree, null, 2)}`);
					debugger;
					function traverse(branches) {
						debugger;
						for(let i=0; i < branches.length; i++) {
							// console.log(branches)
							debugger;
							obj = branches[i]
							console.log(obj)
							listTree += `<li id=${obj.id}> <a href='/chat/${obj.id}'>${obj.message} </a>`;
							if(obj.hasOwnProperty('children')) {
								debugger;
								listTree += `<ul id=${obj.id}>`;
								traverse(branches[i].children);
								listTree += `</ul>`
							}
							else {
								debugger;
							}
							listTree += ` </li>`;
						}
					}
					console.log(`child nodes to be processed nodes ${JSON.stringify(tree.children, null, 2)}`);
					traverse(tree.children)
				}
				debugger;
						$('#updateable').empty().append(listTree);
				});
			});
		</script>
	</div>
	<div class="tree tree-position" align="right" id='tree'>
		<ul align="right">
			<li><a href="chat/<%=nodes.id%>"><%= nodes.message%></a>
				<ul id="updateable">
					<%
                if('children' in nodes){
                console.log(`obtained nodes ${JSON.stringify(nodes, null, 2)}`);
                var listTree = ``;
                debugger;
                function traverse(branches) {
                  for(let i=0; i < branches.length; i++) {
                    // console.log(branches)
                    debugger;
                    obj = branches[i]
                    console.log(obj)
                    listTree += `<li id=${obj.id}> <a href='/chat/${obj.id}'>${obj.message} </a>`;
                    if(obj.hasOwnProperty('children')) {
                      debugger;
                      listTree += `<ul id=${obj.id}>`;
                      traverse(branches[i].children);
                      listTree += `</ul>`
                    }
                    else {
                      debugger;
                    }
                    listTree += ` </li>`;
                  }
                }
                console.log(`child nodes to be processed nodes ${JSON.stringify(nodes.children, null, 2)}`);
                traverse(nodes.children)
              }
                %>
						<%- listTree %>

			</li>
			</ul>
		</ul>
	</div>
</body>

</html>
